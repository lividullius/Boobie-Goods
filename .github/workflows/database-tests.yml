name: Database Connectivity Tests

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]
  schedule:
    # Executa todos os dias √†s 2:00 AM UTC
    - cron: '0 2 * * *'

jobs:
  test-h2-memory:
    name: Test H2 In-Memory Database
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Test H2 In-Memory Connection
      run: |
        cd Backend
        echo "Testing H2 in-memory database connection..."
        mvn test -Dtest="**/TasklyApplicationTests" -Dspring.profiles.active=test
        
  test-h2-file:
    name: Test H2 File Database
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Create H2 Database File
      run: |
        cd Backend
        echo "Creating H2 file database..."
        # Configurar para usar H2 em arquivo
        export SPRING_DATASOURCE_URL="jdbc:h2:file:./testdb;AUTO_SERVER=TRUE"
        mvn clean compile
        
    - name: Test H2 File Connection
      run: |
        cd Backend
        echo "Testing H2 file database connection..."
        export SPRING_DATASOURCE_URL="jdbc:h2:file:./testdb;AUTO_SERVER=TRUE"
        timeout 30s mvn spring-boot:run &
        sleep 20
        
        # Testar se o banco foi criado
        if [ -f "testdb.mv.db" ]; then
          echo "‚úÖ H2 file database created successfully!"
        else
          echo "‚ùå H2 file database creation failed!"
          exit 1
        fi
        
  test-database-operations:
    name: Test Database CRUD Operations
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Start Application
      run: |
        cd Backend
        echo "Starting application for database tests..."
        timeout 60s mvn spring-boot:run -Dspring.profiles.active=test &
        APP_PID=$!
        echo $APP_PID > app.pid
        
        # Aguardar inicializa√ß√£o
        sleep 30
        
        # Verificar se aplica√ß√£o est√° rodando
        if ! ps -p $APP_PID > /dev/null; then
          echo "‚ùå Application failed to start"
          exit 1
        fi
        
    - name: Test Database Schema Creation
      run: |
        cd Backend
        echo "Testing database schema creation..."
        
        # Verificar se H2 console est√° acess√≠vel
        curl -f http://localhost:8080/h2-console || echo "H2 console not accessible"
        
        # Testar endpoint de sa√∫de
        curl -f http://localhost:8080/actuator/health || echo "Health endpoint not accessible"
        
    - name: Test CRUD Operations via API
      run: |
        cd Backend
        echo "Testing CRUD operations..."
        
        # Testar GET - listar contratos (deve retornar array vazio inicialmente)
        echo "Testing GET /api/contratos"
        curl -X GET http://localhost:8080/api/contratos \
          -H "Content-Type: application/json" \
          -w "\nStatus: %{http_code}\n" || echo "GET failed"
          
        # Testar GET - listar pessoas
        echo "Testing GET /api/pessoas"
        curl -X GET http://localhost:8080/api/pessoas \
          -H "Content-Type: application/json" \
          -w "\nStatus: %{http_code}\n" || echo "GET pessoas failed"
          
        # Testar GET - listar projetos
        echo "Testing GET /api/projetos"
        curl -X GET http://localhost:8080/api/projetos \
          -H "Content-Type: application/json" \
          -w "\nStatus: %{http_code}\n" || echo "GET projetos failed"
        
    - name: Test Database Connection Pool
      run: |
        cd Backend
        echo "Testing database connection pool..."
        
        # Fazer m√∫ltiplas requisi√ß√µes para testar pool de conex√µes
        for i in {1..10}; do
          echo "Request $i"
          curl -s http://localhost:8080/api/contratos > /dev/null &
        done
        
        wait
        echo "Connection pool test completed"
        
    - name: Cleanup
      if: always()
      run: |
        cd Backend
        if [ -f app.pid ]; then
          APP_PID=$(cat app.pid)
          kill $APP_PID 2>/dev/null || true
          rm app.pid
        fi
        
  test-database-performance:
    name: Test Database Performance
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Performance Test
      run: |
        cd Backend
        echo "Running database performance tests..."
        
        # Compilar e executar testes espec√≠ficos se existirem
        mvn clean test -Dtest="**/*PerformanceTest*" || echo "No performance tests found"
        
        # Medir tempo de inicializa√ß√£o da aplica√ß√£o
        echo "Measuring application startup time..."
        start_time=$(date +%s)
        timeout 60s mvn spring-boot:run -Dspring.profiles.active=test &
        APP_PID=$!
        
        # Aguardar at√© aplica√ß√£o responder
        while ! curl -f http://localhost:8080/actuator/health 2>/dev/null; do
          sleep 1
          current_time=$(date +%s)
          elapsed=$((current_time - start_time))
          if [ $elapsed -gt 45 ]; then
            echo "‚ùå Application took too long to start (>45s)"
            kill $APP_PID 2>/dev/null || true
            exit 1
          fi
        done
        
        end_time=$(date +%s)
        startup_time=$((end_time - start_time))
        echo "‚úÖ Application started in ${startup_time} seconds"
        
        # Parar aplica√ß√£o
        kill $APP_PID 2>/dev/null || true
        
  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-h2-memory, test-h2-file, test-database-operations, test-database-performance]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "=== DATABASE CONNECTIVITY TEST SUMMARY ==="
        echo "H2 Memory Test: ${{ needs.test-h2-memory.result }}"
        echo "H2 File Test: ${{ needs.test-h2-file.result }}"
        echo "Database Operations Test: ${{ needs.test-database-operations.result }}"
        echo "Database Performance Test: ${{ needs.test-database-performance.result }}"
        
        if [ "${{ needs.test-h2-memory.result }}" = "success" ] && \
           [ "${{ needs.test-h2-file.result }}" = "success" ] && \
           [ "${{ needs.test-database-operations.result }}" = "success" ] && \
           [ "${{ needs.test-database-performance.result }}" = "success" ]; then
          echo "üéâ All database tests passed!"
        else
          echo "‚ùå Some database tests failed!"
        fi